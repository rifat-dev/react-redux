{"version":3,"sources":["App.js","action/action.js","type.js","serviceWorker.js","reducer/reduce.js","reducer/combindreducer.js","store.js","index.js"],"names":["connect","state","count","countReducer","increment","type","decrement","className","style","backgroundColor","color","padding","borderRadius","fontSize","Button","variant","onClick","outline","Boolean","window","location","hostname","match","initalstate","action","rootreRducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAiDA,IAMeA,eANE,SAACC,GAAD,MACf,CACEC,MAAOD,EAAME,aAAaD,SAIG,CAAEE,UCrD5B,WACH,MAAO,CACHC,KCJqB,cFuDiBC,UC/CvC,WACH,MAAM,CACFD,KCTqB,eFsDdL,EAhDf,YAA8C,IAA/BI,EAA8B,EAA9BA,UAAWE,EAAmB,EAAnBA,UAAUJ,EAAS,EAATA,MAElC,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,MAAO,CACVC,gBAAiB,QACjBC,MAAO,QACPC,QAAS,OACTC,aAAc,MACdC,SAAU,SAIV,2BAAIX,GACJ,6BACE,kBAACY,EAAA,EAAD,CACEP,UAAU,OACVQ,QAAQ,YACRL,MAAM,YACNM,QAAS,kBAAMZ,KACfI,MAAO,CAAEK,SAAU,OAAQI,QAAS,SALtC,KASA,kBAACH,EAAA,EAAD,CACEP,UAAU,GACVQ,QAAQ,YACRL,MAAM,UACNF,MAAO,CAAEK,SAAU,OAAQI,QAAS,QACpCD,QAAS,kBAAMV,MALjB,Y,MGpBQY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBChBAC,EAAY,CACdrB,MAAM,GAqBKC,MAlBf,WAAgD,IAA1BF,EAAyB,uDAAnBsB,EAAYC,EAAO,uCAC3C,OAAOA,EAAOnB,MACV,IFRqB,YESjB,kCACOJ,GADP,IAEIC,MAAMD,EAAMC,MAAM,IAE1B,IFZqB,YEajB,kCACOD,GADP,IAEIC,MAAMD,EAAMC,MAAM,IAE1B,QACI,OAAOD,ICZJwB,EAJMC,YAAgB,CACjCvB,iBCESwB,EAAQC,YAAYH,EAFnB,ICKdI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SJoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.300c18c7.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport Button from '@material-ui/core/Button';\nimport { increment, decrement } from './action/action'\n\nimport './App.css';\n\nfunction App({ increment, decrement,count }) {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{\n          backgroundColor: 'white',\n          color: 'black',\n          padding: '40px',\n          borderRadius: '6px',\n          fontSize: '60px',\n\n        }}\n        >\n          <p>{count}</p>\n          <div>\n            <Button\n              className='mx-4'\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => increment()}\n              style={{ fontSize: '30px', outline: 'none' }}\n            >\n              +\n            </Button>\n            <Button\n              className=''\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ fontSize: '30px', outline: 'none' }}\n              onClick={() => decrement()}\n            >\n              -\n            </Button>\n          </div>\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nconst mapProps = (state) => (\n  {\n    count: state.countReducer.count\n  }\n)\n\nexport default connect(mapProps, { increment, decrement })(App);\n","import { increment_value, decrement_value } from '../type'\r\n\r\nexport function increment() {\r\n    return {\r\n        type: increment_value\r\n    }\r\n}\r\n\r\nexport function decrement() {\r\n    return{\r\n        type: decrement_value\r\n    }\r\n}","export const increment_value='increment'\r\nexport const decrement_value='decrement'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {increment_value,decrement_value} from '../type'\r\n\r\nconst initalstate={\r\n    count:0\r\n}\r\n\r\nfunction countReducer(state=initalstate,action){\r\n    switch(action.type){\r\n        case increment_value:\r\n            return{\r\n                ...state,\r\n                count:state.count+1\r\n            }\r\n        case decrement_value:\r\n            return{\r\n                ...state,\r\n                count:state.count-1\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport default countReducer","import {combineReducers} from 'redux'\r\nimport countReducer from './reduce'\r\n\r\nconst rootreRducer = combineReducers({\r\n    countReducer\r\n})\r\n\r\nexport default rootreRducer","import {createStore} from 'redux'\r\n\r\nimport rootreRducer from './reducer/combindreducer'\r\n\r\nconst initial={}\r\n\r\nexport const store = createStore(rootreRducer,initial)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport {store} from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}